<?php
/**
* @file
* Basic Module file.
*
*/

/**
 * Implements hook_init().
 */

function scrollreveal_init() {
  $module_path = drupal_get_path('module', 'scrollreveal');
  $settings = variable_get('scrollreveal_settings');
  if (isset($settings['triggers_fieldset'])) {
    drupal_add_js(array(
      'scrollreveal' => $settings,
    ),
    'setting');
    drupal_add_js($module_path . '/scrollreveal.custom.js');
    libraries_load('scrollreveal');
  }
}

/**
* Implementation of hook_menu().
*/
function scrollreveal_menu() {
  // Admin settings.
  $items['admin/config/user-interface/scrollreveal'] = array(
    'title' => 'Scroll Reveal',
    'description' => 'Add Scroll Reveal effect to any tagged element',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('scrollreveal_admin'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Callback function for admin setting.
 */
function scrollreveal_admin($form, &$form_state) {
  // This module will not work if used in overlay paths such as 
  // admin/* , node/add etc if user has overlay access.
  // Since the form builder is called after every AJAX request, we rebuild
  // the form based on $form_state.
  $settings = variable_get('scrollreveal_settings');
  $num_elements = isset($settings['triggers_fieldset']) ? count($settings['triggers_fieldset']) + 1 : 1;
  $form_state['triggers'] = $num_elements;

  $options['helper'] = array(
    '#markup' => t('<h3>Scroll Reveal Options</h3>
<p>A simple way to create and maintain how elements fade in, triggered when they enter the viewport. An open-source experiment from <a href="https://twitter.com/julianlloyd">@JulianLloyd</a></p>'),
  );
  $options['triggers_fieldset'] = array(
    '#tree' => TRUE,
    '#title' => t("Target elements"),
    // The prefix/suffix provide the div that we're replacing, named by
    // #ajax['wrapper'] above.
    '#prefix' => '<div id="triggers-div">',
    '#suffix' => '</div>',
    '#type' => 'vertical_tabs',
    '#description' => t('Elements where Parallax Effect will be added'),
  );
  $i = 1;
  $triggers = isset($settings['triggers_fieldset']) ? $settings['triggers_fieldset'] : array();
  foreach ($triggers as $trigger) {
    $options['triggers_fieldset']["trigger$i"] = array(
      '#type' => 'fieldset',
      '#title' => isset($trigger["element"]) ? $trigger["element"] : t('New element'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'triggers_fieldset'
    );
    $options['triggers_fieldset']["trigger$i"]["element"] = array(
      '#type' => 'textfield',
      '#default_value' => isset($trigger["element"]) ? $trigger["element"] : '',
      '#title' => "Valid jQuery selector",
      '#required' => TRUE,
    );
    $options['triggers_fieldset']["trigger$i"]["enter"] = array(
      '#type' => 'select',
      '#title' => "Enter",
      '#default_value' => isset($trigger["enter"]) ? $trigger["enter"] : 0,
      '#options' => array(
        0 => t('- Select -'),
        'top' => t('Top'),
        'bottom' => t('Bottom'),
        'right' => t('Right'),
        'left' => t('Left'),
      ),
    );
    $options['triggers_fieldset']["trigger$i"]["move"] = array(
      '#type' => 'textfield',
      '#title' => "Move",
      '#default_value' => isset($trigger["move"]) ? $trigger["move"] : 0,
      '#size' => 6,
      '#maxlength' => 4,
    );
    $options['triggers_fieldset']["trigger$i"]["over"] = array(
      '#type' => 'textfield',
      '#title' => "Over",
      '#default_value' => isset($trigger["over"]) ? $trigger["over"] : 0,
      '#size' => 6,
      '#maxlength' => 4,
    );
    $options['triggers_fieldset']["trigger$i"]["after"] = array(
      '#type' => 'textfield',
      '#title' => "After",
      '#default_value' => isset($trigger["after"]) ? $trigger["after"] : 0,
      '#size' => 6,
      '#maxlength' => 4,
    );
    $options['triggers_fieldset']["trigger$i"]["wait"] = array(
      '#type' => 'textfield',
      '#title' => "Move",
      '#default_value' => isset($trigger["wait"]) ? $trigger["wait"] : 0,
      '#size' => 6,
      '#maxlength' => 4,
    );
    $options['triggers_fieldset']["trigger$i"]['delete'] = array(
      '#type' => 'button', 
      '#value' => t('Delete element'),
      '#name' => 'delete-' . $i,
      '#submit' => array('scrollreveal_delete_submit'),
    );
    $i++;
  }
  $options['triggers_fieldset']["trigger$i"] = array(
    '#type' => 'fieldset',
    '#title' => t('New element'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'triggers_fieldset'
  );
  $options['triggers_fieldset']["trigger$i"]["element"] = array(
    '#type' => 'textfield',
    '#default_value' => NULL,
    '#title' => "Valid jQuery selector",
    '#description' => "A jQuery selector to identify the element(s) that will appear with the Scroll Reveal. For example for a list of items in a view you could use #block-views-services-block .views-row.",
    '#required' => FALSE,
  );
  $options['triggers_fieldset']["trigger$i"]["enter"] = array(
    '#type' => 'select',
    '#title' => "Enter",
    '#default_value' => 0,
    '#description' => "Controls the vector origin of your reveal animation.",
    '#options' => array(
      0 => t('- None -'),
      'top' => t('Top'),
      'bottom' => t('Bottom'),
      'right' => t('Right'),
      'left' => t('Left'),
    ),
  );
  $options['triggers_fieldset']["trigger$i"]["move"] = array(
    '#type' => 'textfield',
    '#title' => "Move",
    '#description' => "The distance your revealing element travels.",
    '#default_value' => 0,
    '#size' => 6,
    '#maxlength' => 4,
  );
  $options['triggers_fieldset']["trigger$i"]["over"] = array(
    '#type' => 'textfield',
    '#title' => "Over",
    '#description' => "The duration of your reveal animation.",
    '#default_value' => 0,
    '#size' => 6,
    '#maxlength' => 4,
  );
  $options['triggers_fieldset']["trigger$i"]["after"] = array(
    '#type' => 'textfield',
    '#title' => "After",
    '#description' => "The duration before your reveal begins.",
    '#default_value' => 0,
    '#size' => 6,
    '#maxlength' => 4,
  );
  $options['triggers_fieldset']["trigger$i"]["wait"] = array(
    '#type' => 'textfield',
    '#title' => "Move",
    '#description' => "The duration before your reveal begins.",
    '#default_value' => 0,
    '#size' => 6,
    '#maxlength' => 4,
  );
  $options['#tree'] = TRUE;
  $form['scrollreveal_settings'] = $options;
  $form['actions']['#type'] = 'actions';
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save configuration'),
  );
  $form['#submit'][] = 'scrollreveal_admin_form_submit';
  // Disable automatic defaults, which don't work with nested values.
  return $form;
}

function scrollreveal_delete_submit($form, &$form_state) {
}

/**
 * Now we add a handler/function to validate the data entered into the
 * "year of birth" field to make sure it's between the values of 1900
 * and 2000. If not, it displays an error. The value report is
 * $form_state['values'] (see http://drupal.org/node/144132#form-state).
 *
 * Notice the name of the function. It is simply the name of the form
 * followed by '_validate'. This is always the name of the default validation
 * function. An alternate list of validation functions could have been provided
 * in $form['#validate'].
 *
 * @see scrollreveal_admin()
 */
function scrollreveal_admin_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == "Delete element") {
    $settings = variable_get('scrollreveal_settings');
    $child = $form_state['clicked_button']['#parents'][2];
    unset($settings['triggers_fieldset'][$child]);
    variable_set('scrollreveal_settings', $settings);
    $form_state['rebuild'] = TRUE;
    $form_state['flag'] = 1;
    drupal_set_message(t('The element have been deleted.'));
    drupal_goto('admin/config/user-interface/scrollreveal');
  }
}

function scrollreveal_admin_form_submit($form, &$form_state) {
  // Exclude unnecessary elements.
  form_state_values_clean($form_state);
  $i = $form_state['triggers'];
  if (!strlen($form_state['values']['scrollreveal_settings']['triggers_fieldset']["trigger$i"]["element"])) {
    unset($form_state['values']['scrollreveal_settings']['triggers_fieldset']["trigger$i"]);
  }
  unset($form_state['values']['scrollreveal_settings']['triggers_fieldset']["scrollreveal_settings__triggers_fieldset__active_tab"]);

  foreach ($form_state['values'] as $key => $value) {
    if (is_array($value) && isset($form_state['values']['array_filter'])) {
      $value = array_keys(array_filter($value));
    }
    variable_set($key, $value);
  }

  drupal_set_message(t('The configuration options have been saved.'));
}

/**
 * Libraries implementation.
 */

/**
 * Implements hook_libraries_info().
 */
function scrollreveal_libraries_info() {
  $libraries['scrollreveal'] = array(
    'name' => 'ScrollReveal',
    'vendor url' => 'https://github.com/julianlloyd/scrollReveal.js',
    'download url' => 'https://github.com/julianlloyd/scrollReveal.js',
    'version arguments' => array(
      'file' => 'scrollReveal.js',
      // 3.x.x: Botstrap v3.0.3
      'pattern' => '/scrollReveal.js\s+v?([0-9\.]+)/',
      'lines' => 22,
    ),
    'files' => array(
      'js' => array(
        'scrollReveal.js',
      ),
    ),
  );

  return $libraries;
}

/**
 * Check if the Sroll Reveal library is installed.
 *
 * @return
 *   A boolean indicating the installed status.
 */
function scrollreveal_installed() {
  if (($library = libraries_detect('scrollreveal')) && !empty($library['installed'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the Scroll Reveal library has been loaded.
 *
 * @return
 *   A boolean indicating the loaded status.
 */
function scrollreveal_library_loaded() {
  if (($library = libraries_load('scrollreveal')) && !empty($library['loaded'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

